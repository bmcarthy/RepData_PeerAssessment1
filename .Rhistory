#  value
cachemean(v)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
#Call  the makeVector() function and assign it's
#  return value ( a list of four functions) to a variable, v
#  v is now a list of four functions
v <- makeVector()
#use v's set function to create a vector
#  containing the numbers 20 through to 40
v$set(20:40)
#use v's get function to retrieve the vector created
v$get()
#pass the list v to the cachemean() function
#   the mean of the numeric vector 20:40 should be returned
cachemean(v)
#pass the list v to the cachemean() function a second time
#  the mean of the numeric vector 20:40 should be returned
#  also a message "retrieving value from cache" indicating that the mean
#  is not being calculated this time but is being retrieved from the cached
#  value
cachemean(v)
#use v's set function to create a new vector
#  containing the numbers 23,23,34.6,654.35
v$set(c(23,23,34.6,654.35))
#pass the list v to the cachemean() function
#   the mean of the numeric vector 23,23,34.6,654.35 should be returned
cachemean(v)
#pass the list v to the cachemean() function a second time
#  the mean of the numeric vector 23,23,34.6,654.35 should be returned
#  also a message "retrieving value from cache" indicating that the mean
#  is not being calculated this time but is being retrieved from the cached
#  value
cachemean(v)
v
x= numeric()
x
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
#Call  the makeVector() function and assign it's
#  return value ( a list of four functions) to a variable, v
#  v is now a list of four functions
v <- makeVector()
#use v's set function to create a vector
#  containing the numbers 20 through to 40
v$set(20:40)
#use v's get function to retrieve the vector created
v$get()
#pass the list v to the cachemean() function
#   the mean of the numeric vector 20:40 should be returned
cachemean(v)
#pass the list v to the cachemean() function a second time
#  the mean of the numeric vector 20:40 should be returned
#  also a message "retrieving value from cache" indicating that the mean
#  is not being calculated this time but is being retrieved from the cached
#  value
cachemean(v)
#use v's set function to create a new vector
#  containing the numbers 23,23,34.6,654.35
v$set(c(23,23,34.6,654.35))
#pass the list v to the cachemean() function
#   the mean of the numeric vector 23,23,34.6,654.35 should be returned
cachemean(v)
#pass the list v to the cachemean() function a second time
#  the mean of the numeric vector 23,23,34.6,654.35 should be returned
#  also a message "retrieving value from cache" indicating that the mean
#  is not being calculated this time but is being retrieved from the cached
#  value
cachemean(v)
m
x
x <- matrix (1:16, nrow=4, ncol=4)
x
solve(x)
?solve
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
h8 <- hilbert(8); h8
sh8 <- solve(h8)
sh8
x <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
z <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
x <- matrix (z, nrow=8, ncol=8)
x <- matrix (z)
x=matrix()
x <- matrix (z, nrow=8, ncol=8)
x <- as.matrix (z, nrow=8, ncol=8)
x as.matrix <- matrix (z, nrow=8, ncol=8)
z
createInput <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
z <- createInput(8)
z
x as.matrix <- matrix (z, nrow=8, ncol=8)
x <- matrix (z, nrow=8, ncol=8)
x
solve(x)
x <- matrix (z)
x
x <- matrix (z)
x
x <- matrix (z, nrow=8, ncol=8)
x
source('~/Desktop/Coursera/R Programming/Week 2/makeCacheMatrix.R')
source('~/Desktop/Coursera/R Programming/Week 2/cacheSolve.R')
v <- makeCacheMatrix()
print(v)
v <- makeCacheMatrix()
#use v's set function to create a vector
#  containing the numbers 20 through to 40
z <- (1:n; 1 / outer(z - 1, z, "+"))
v$set(z,8)
print(x)
print(i)
v <- makeCacheMatrix()
z <- 1:n; 1 / outer(z - 1, z, "+")
v$set(z,8)
print(x)
print(i)
v <- makeCacheMatrix()
z <- 1:8; 1 / outer(z - 1, z, "+")
v$set(z,8)
print(x)
print(i)
v <- makeCacheMatrix()
z <- 1:8; 1 / outer(z - 1, z, "+")
v$set(z,8)
#use v's get function to retrieve the vector created
v$get()
v <- makeCacheMatrix()
z <- 1:8; 1 / outer(z - 1, z, "+")
v$set(z,8)
#use v's get function to retrieve the vector created
v$get()
#pass the list v to the cachemean() function
#   the mean of the numeric vector 20:40 should be returned
cacheinverse(v)
v <- makeCacheMatrix()
z <- 1:8; 1 / outer(z - 1, z, "+")
v$set(z,8)
#use v's get function to retrieve the vector created
v$get()
#pass the list v to the cachemean() function
#   the mean of the numeric vector 20:40 should be returned
cacheSolve(v)
v <- makeCacheMatrix()
#z <- 1:8; 1 / outer(z - 1, z, "+")
v$set((1:8; 1 / outer(z - 1, z, "+"),8)
#use v's get function to retrieve the vector created
v$get()
v <- makeCacheMatrix()
z <<- 1:8; 1 / outer(z - 1, z, "+")
v$set(z,8)
#use v's get function to retrieve the vector created
v$get()
v <- makeCacheMatrix()
y <<- 1:8; 1 / outer(z - 1, z, "+")
v$set(y,8)
#use v's get function to retrieve the vector created
v$get()
g <- 1:8
h <- 1 / outer(i - 1, i, "+")
i<-1
h <- 1 / outer(i - 1, i, "+")
h
i<-1:2
i
h <- 1 / outer(i - 1, i, "+")
h
v <- makeCacheMatrix()
y <<- 1:8; 1 / outer(z - 1, z, "+")
print(y)
v$set(y,8)
v <- makeCacheMatrix()
z <- 1:8; y <- 1 / outer(z - 1, z, "+")
print(y)
v <- makeCacheMatrix()
z <- 1:8; y <- 1 / outer(z - 1, z, "+")
v$set(y,8)
#use v's get function to retrieve the vector created
v$get()
v <- makeCacheMatrix()
z <- 1:8; y <- 1 / outer(z - 1, z, "+")
v$set(y,8)
#use v's get function to retrieve the vector created
v$get()
#pass the list v to the cachemean() function
#   the mean of the numeric vector 20:40 should be returned
cacheSolve(v)
#pass the list v to the cachemean() function a second time
#  the mean of the numeric vector 20:40 should be returned
#  also a message "retrieving value from cache" indicating that the mean
#  is not being calculated this time but is being retrieved from the cached
#  value
cacheinverse(v)
#use v's set function to create a new vector
#  containing the numbers 23,23,34.6,654.35
v$set(c(23,23,34.6,654.35))
#pass the list v to the cachemean() function
#   the mean of the numeric vector 23,23,34.6,654.35 should be returned
cacheinverse(v)
#pass the list v to the cachemean() function a second time
#  the mean of the numeric vector 23,23,34.6,654.35 should be returned
#  also a message "retrieving value from cache" indicating that the mean
#  is not being calculated this time but is being retrieved from the cached
#  value
cacheinverse(v)
#Call  the makeVector() function and assign it's
#  return value ( a list of four functions) to a variable, v
#  v is now a list of four functions
v <- makeCacheMatrix()
z <- 1:8; y <- 1 / outer(z - 1, z, "+")
v$set(y,8)
#use v's get function to retrieve the vector created
v$get()
#pass the list v to the cachemean() function
#   the mean of the numeric vector 20:40 should be returned
cacheSolve(v)
#pass the list v to the cachemean() function a second time
#  the mean of the numeric vector 20:40 should be returned
#  also a message "retrieving value from cache" indicating that the mean
#  is not being calculated this time but is being retrieved from the cached
#  value
cacheSolve(v)
v <- makeCacheMatrix()
z <- 1:8; y <- 1 / outer(z - 1, z, "+")
v$set(y,8)
v$get()
cacheSolve(v)
cacheSolve(v)
z <- 1:6; y <- 1 / outer(z - 1, z, "+")
v$set(z,6)
cacheSolve(v)
cacheSolve(v)
v <- makeCacheMatrix()
z <- 1:8; y <- 1 / outer(z - 1, z, "+")
v$set(y,8)
v$get()
cacheSolve(v)
cacheSolve(v)
z <- 1:12; y <- 1 / outer(z - 1, z, "+")
v$set(z,12)
cacheSolve(v)
cacheSolve(v)
v <- makeCacheMatrix()
z <- 1:8; y <- 1 / outer(z - 1, z, "+")
v$set(y,8)
v$get()
cacheSolve(v)
cacheSolve(v)
z <- 1:4; y <- 1 / outer(z - 1, z, "+")
v$set(z,4)
cacheSolve(v)
cacheSolve(v)
v <- makeCacheMatrix()
z <- 1:8; y <- 1 / outer(z - 1, z, "+")
v$set(y,8)
v$get()
cacheSolve(v)
cacheSolve(v)
z <- 1:8; y <- 1 / outer(z - 2, z, "+")
v$set(z,8)
cacheSolve(v)
cacheSolve(v)
z <- 1:8; y <- 1 / outer(z - 2, z, "+")
y
solve(y)
z <- 1:8; y <- 1 / outer(z + 1, z, "+")
solve(y)
v <- makeCacheMatrix()
z <- 1:8; y <- 1 / outer(z - 1, z, "+")
v$set(y,8)
v$get()
cacheSolve(v)
cacheSolve(v)
z <- 1:8; y <- 1 / outer(z + 1, z, "+")
v$set(z,8)
cacheSolve(v)
cacheSolve(v)
z <- 1:8; y <- 1 / outer(z + 1, z, "+")
solve(y)
v <- makeCacheMatrix()
z <- 1:8; y <- 1 / outer(z - 1, z, "+")
v$set(y,8)
v$get()
cacheSolve(v)
cacheSolve(v)
z <- 1:8; y <- 1 / outer(z + 1, z, "+")
v$set(y,8)
cacheSolve(v)
cacheSolve(v)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
v <- makeCacheMatrix()
z <- 1:8; y <- 1 / outer(z - 1, z, "+")
v$set(y,8)
v$get()
cacheSolve(v)
cacheSolve(v)
z <- 1:8; y <- 1 / outer(z + 1, z, "+")
v$set(y,8)
cacheSolve(v)
cacheSolve(v)
v <- makeCacheMatrix()
z <- 1:8; y <- 1 / outer(z - 1, z, "+")
v$set(y,8)
v$get()
cacheSolve(v)
cacheSolve(v)
z <- 1:8; y <- 1 / outer(z + 1, z, "+")
v$set(y,8)
cacheSolve(v)
cacheSolve(v)
str cacheSolve
str (cacheSolve)
library(datasets)
data(iris)
?iris
iris
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
s <- split(iris, iris$Species)
s
lapply(s, mean[Sepal.Length]
)
lapply(s, mean(s)[Sepal.Length])
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function(s) colMeans(s[, c("Sepal.Length")]))
s$virginica
apply (s$virginica[,1],2,mean)
s$virginica[,1]
mean(s$virginica[,1])
library(datasets)
data(mtcars)
?mtcars
mtcars
apply(mtcars,2,mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars,cyl,mean)
tapply(mtcars$cyl,mtcars$mpg, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
debug(ls)
ls
ls
ls
debug(lm)
lm(y ~ x)
quit
debug(ls)
x=1:4
n
ls
debug(ls)
Q:
q
Q
ls
ls()
Q:
q
n
n
source('~/Desktop/Coursera/R Programming/Week 2/makeCacheMatrix.R')
n
ls
ls()
library(datasets)
data(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
x <- sapply(split(mtcars$hp, mtcars$cyl), mean)
x
x[1]
x[3]
abs(x[3] - x[1])
set.seed(1)
rpois(5, 2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages(c("httpuv"))
library(httr)
library(httr)
library(httpuv)
library(jsonlite)
library(httr)
library(httr)
library(httpuv)
library(jsonLite)
installpackages("jsonlite")
install.packages("jsonlite")
library(httr)
library(httr)
library(httpuv)
library(jsonite)
library(httr)
library(httr)
library(httpuv)
library(jsonlite)
help(oauth_endpoints)
help(oauth_app)
oauth_endpoints("github")
myapp <- oauth_app("github", "65d2028410cbc28a3532")
GITHUB_CONSUMER_SECRET<-723667630bac9f070d8e47ac476eb6e2f430855b
GITHUB_CONSUMER_SECRET<-"723667630bac9f070d8e47ac476eb6e2f430855b"
myapp <- oauth_app("github", "65d2028410cbc28a3532")
myapp <- oauth_app("github", "65d2028410cbc28a3532", secret="723667630bac9f070d8e47ac476eb6e2f430855b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
library(httr)
library(httpuv)
library(jsonlite)
myapp <- oauth_app("github", "bf04cf91c1522279ef71")
setwd("Users/bfmcarthy/Desktop/Coursera/Getting and Cleaning Data/Project/UCI HAR Dataset")
getwd()
setwd("Users/bfmcarthy/Desktop/Coursera/Getting and Cleaning Data/Project")
setwd("Users/bfmcarthy/Desktop/Coursera/Getting and Cleaning Data/Project/UCI HAR Dataset")
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
install.package ("knitr")
install.packages ("knitr")
-------------
/
NEI <- readRDS("./exdata_data_NEI_data/summarySCC_PM25.rds")
SCC <- readRDS("./exdata_data_NEI_data/Source_Classification_Code.rds")
library(plyr)
SCCcnt1<- count(SCC, vars=SCC.Level.One)
getwd()
SCC <- readRDS("./exdata_data_NEI_data/Source_Classification_Code.rds")
library(plyr)
SCCcnt1<- count(SCC, vars=SCC.Level.One)
SCC <- readRDS("./exdata_data_NEI_data/Source_Classification_Code.rds")
library (Rcmdr)
library (Rcmdr)
library(jgr)
library(JGR)
install.packages("JGR")
library(JGR)
JGR
JGR()
library(Rcmdr)
setwd("~/RepData_PeerAssessment1")
read.csv (activity.csv, header=TRUE)
read.csv (file=activity.csv, header=TRUE)
getwd()
read.csv (activity.csv, header=TRUE)
read.csv (/Users/bfmcarthy/RepData_PeerAssessment1/activity.csv, header=TRUE)
read.csv (activity.csv, header=TRUE)
activity <- read.csv("~/RepData_PeerAssessment1/activity.csv")
View(activity)
class(activity)
names(activity)
dim(activity)
dimnames(activity)
activity <- read.csv("~/RepData_PeerAssessment1/activity.csv")
View(activity)
naidx<-is.na(activity[1,])
naidx
naidx<-is.na(activity[,1])
naidx
activity[naidx]
activity[naidx,1]
nadata<-activity[naidx,1]
nadata
actlist<- as.list(activity)
actlist
dim(actlist)
actlist[1,1]
sapply(activity, mean)
sapply(activity[,3], mean)
tapply(activity[,3], activity[,2])
tapply(activity[,3], activity[,2], mean)
tapply(activity[,1], activity[,2], mean)
tapply(activity[,1], activity[,2], median)
splitbydate <-(activity, activity$date)
splitbydate <-split(activity, activity$date)
lapply (splitbydate, colMeans(x[,1]))
lapply (splitbydate, function(x) colMeans(x[,1]))
splitbydate
lapply (splitbydate, function(x) colMeans(x[, c("steps")]))
lapply (splitbydate, mean0
)
lapply (splitbydate, mean)
apply (splitbydate, mean)
tapply(activity[,1], activity[,2], median, na.rm=TRUE)
lapply(splitbydate, median, na.rm=TRUE)
lapply(as.list(splitbydate), median, na.rm=TRUE)
lapply(as.list(splitbydate)[,1], median, na.rm=TRUE)
x <-as.list(splitbydate)
x
lapply(x[,1], median, na.rm=TRUE)
lapply(x[,1], median)
lapply(x, median)
lapply(x, mean)
lapply(x, mean, rm.na=TRUE)
install.packages("ggplot2")
